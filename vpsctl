#!/bin/bash


# Control VPS containers
# Iv√°n Chavero <ichavero@chavero.com.mx>

#TODO use getops
COMMAND="$1"
VPS_NAME="$2"
VPS_STATIC_IP="$3"
RUNC="/usr/bin/runc"
VPS_BASE="/home/vservers"
OCI_IMAGE_BASE="/home/vservers/OCI-Image-Bundles"
OCI_IMAGE_DIR="${OCI_IMAGE_BASE}/sotolito-vps-base"
VPS_IMAGE_DIR="$OCI_IMAGE_BASE/$VPS_NAME"




# Create VPS using runc containers 
function create_vps {
	WANTS_DIR="/etc/systemd/system/sotolito-vps.target.wants"
	echo "Creating ${VPS_NAME} OCI Bundle on ${VPS_IMAGE_DIR}"
	mkdir $VPS_IMAGE_DIR
	# TODO: Check a how to reuse the rootfs
	cp -rp $OCI_IMAGE_DIR/rootfs $VPS_IMAGE_DIR/.
	cp -rp $OCI_IMAGE_DIR/rootfs/etc $VPS_IMAGE_DIR/.
	cp -rp $OCI_IMAGE_DIR/rootfs/var $VPS_IMAGE_DIR/.
	cp -rp $OCI_IMAGE_DIR/rootfs/home $VPS_IMAGE_DIR/.
	cp $OCI_IMAGE_DIR/config-template.json $VPS_IMAGE_DIR/config.json
	sed -i "s,<VPS_ETC_DIR>,$VPS_IMAGE_DIR/etc," $VPS_IMAGE_DIR/config.json
	sed -i "s,<VPS_VAR_DIR>,$VPS_IMAGE_DIR/var," $VPS_IMAGE_DIR/config.json
	sed -i "s,<VPS_HOME_DIR>,$VPS_IMAGE_DIR/home," $VPS_IMAGE_DIR/config.json
	sed -i "s,<VPS_STATIC_IP>,$VPS_STATIC_IP," $VPS_IMAGE_DIR/config.json

	cp $OCI_IMAGE_DIR/systemd/sotolito-vps-base.cfg ${WANTS_DIR}/${VPS_NAME}.cfg

	sed -i "s,<VPS_STATIC_IP>,$VPS_STATIC_IP," ${WANTS_DIR}/${VPS_NAME}.cfg
	sed -i "s,<VPS_NET>,sotolito-vps," ${WANTS_DIR}/${VPS_NAME}.cfg
	sed -i "s,<VPS_DIR>,$VPS_IMAGE_DIR," ${WANTS_DIR}/${VPS_NAME}.cfg

	echo "Enabling systemd Unit"
	ln -s /usr/lib/systemd/system/sotolito-vps@.service ${WANTS_DIR}/sotolito-vps@${VPS_NAME}.service
	systemctl enable sotolito-vps@${VPS_NAME}.service
	systemctl start sotolito-vps@${VPS_NAME}.service
	
	#Open SSH port
	# firewall-cmd --permanent --zone="public" --add-forward-port=port=2000:proto=tcp:toport=22:toaddr=$VPS_STATIC_IP
	# firewall-cmd --reload
	echo "Done"
}


# Stop VPS container
# (for some reason we have to send SIGKILL)
function stop_vps {
	$RUNC exec $1 shutdown -h now
	$RUNC kill $1 KILL
	#TODO: check how not to delete the container
        STATUS=$(runc list | grep running)
	while [ "${STATUS}" != "" ]; do
        	echo -ne "Status: ${STATUS}\r"
        	STATUS=$(runc list | grep running)
	done
        echo -ne "\r"
	$RUNC delete $1
	echo ""
	echo "$1 succesfully stopped"
}

# Start VPS container
function start_vps {
	CONTAINER_DIR="${OCI_IMAGE_BASE}/${1}"
	if [ ! -d $CONTAINER_DIR ]; then
		echo "Container $1 OCI bundle does not exist"
		exit
	fi
	cd $CONTAINER_DIR
	if [ "${VPS_EXEC_MODE}" == "systemd" ]; then
		echo "Starting $1 VPS in systemd mode"
		$RUNC --systemd-cgroup --log /dev/stdin run --pid-file $CONTAINER_DIR/$1.pid $1
	else
		echo "Starting $1 VPS in standalone mode"
		$RUNC --systemd-cgroup --log /dev/stdin run -d --pid-file $CONTAINER_DIR/$1.pid $1
	fi
}

# Enter VPS shell
function enter_vps {
	runc exec -t $1 /bin/bash
}


case "$COMMAND" in 
	create)
		echo "Creating VPS $VPS_NAME"
		create_vps $VPS_NAME
		;;
	start)
		echo "Starting VPS $VPS_NAME"
		start_vps $VPS_NAME
		;;
	stop)
		echo "Stopping VPS $VPS_NAME"
		stop_vps $VPS_NAME
		;;
	restart)
		echo "Restart VPS $VPS_NAME"
		echo "Stopping VPS $VPS_NAME"
		stop_vps $VPS_NAME
		echo "Starting VPS $VPS_NAME"
		start_vps $VPS_NAME
		;;
	enter)
		echo "Starting shell inside $VPS_NAME"
		enter_vps $VPS_NAME
		;;
	*)
		echo "Usage: $0 start|stop|restart|enter VPS_NAME"
		exit
esac



