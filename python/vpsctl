#!/usr/bin/env python3

""" Manages LXC domains """

# vpsctl

import subprocess
import sys
import libvirt
import click
from jinja2 import Environment, FileSystemLoader
# TODO from spinners import Spinners

# TODO import NetworkManager

VERSION = "0.0.1"
LIBVIRT_SYSTEM = "lxc:///system"
VPS_BASE_PATH = "/home/vservers/OCI-Image-Bundles"
VPS_TEMPLATE_DIR = f"{VPS_BASE_PATH}/sotolito-vps-web:1.0.0-centos9"
DEBUG = True


def generate_nm_connection(ip_address):
    """ Creates the content of the Network Manager connection """
    netmask = "24"
    dns = "192.168.122.1"

    result = subprocess.run(
        ["/usr/bin/nmcli",
         "--offline",
         "connection",
         "add",
         "type",
         "ethernet",
         "con-name",
         "lxc-vps",
         "ipv4.addresses",
         f"{ip_address}/{netmask}",
         "ipv4.dns",
         dns,
         "ipv4.method",
         "manual"],
        check=True,
        text=True,
        stdout=subprocess.PIPE
    )
    print(f"Res: {result.stdout}")
    return result.stdout


def copy_vps_dir(vps_dir):
    """ Copy the VPS template directory to the new VPS """
    result = subprocess.run(
        ["/usr/bin/cp",
         "-rp",
         VPS_TEMPLATE_DIR,
         vps_dir],
        check=True,
        text=True,
        capture_output=True
    )
    if result.returncode != 0:
        print(f"Error creating VPS directory: {result.stderr}")
    print(f"Res: {result.stdout}")
    return result.stdout


def delete_vps_dir(vps_dir):
    """ Delete the VPS directory """
    print(f"Deleting VPS: {vps_dir} directory")
    result = subprocess.run(
        ["/usr/bin/rm",
         "-rf",
         vps_dir],
        check=True,
        text=True,
        capture_output=True
    )
    if result.returncode != 0:
        print(f"Error deleting VPS directory: {result.stderr}")
    print(f"Res: {result.stdout}")
    return result.stdout


def write_nm_connection(vps_dir, conn_string):
    """
        Write the Network Manager connection string to the
        connections location in the VPS
    """

    nm_dir = f"{vps_dir}/etc/NetworkManager/system-connections"
    nm_file = f"{nm_dir}/sotolito.nmconnection"
    print(f"Creating nm file: {nm_file}")
    with open(nm_file, "w", encoding="utf8") as nm_fh:
        nm_fh.write(conn_string)


def get_next_ip():
    """
        Get the next ip address available from the
        last_ip file
    """
    with open(f"{VPS_BASE_PATH}/vps-info/last_ip", encoding="utf8") as ip_file:
        last_ip = ip_file.readline()
        parts = last_ip.rsplit(".", 1)
        last_oct = int(parts[1]) + 1
        return f"{parts[0]}.{last_oct}"


def update_vps_info(name, ip_address):
    """
        Stores the ip address information to the control files:
        VPS_BASE_PATH/vps-info/last_ip
        VPS_BASE_PATH/vps-info/vps-hosts
    """

    with open(f"{VPS_BASE_PATH}/vps-info/last_ip", "w",
              encoding="utf8") as ip_file:
        ip_file.write(ip_address)

    with open(f"{VPS_BASE_PATH}/vps-info/vps-hosts", "a",
              encoding="utf8") as info_file:
        info_file.write(f"{ip_address} {name}")


def create_domain(name):
    """
        Creates a LXC VPS libvirt domain
    """

    env = Environment(loader=FileSystemLoader("templates/"))
    template = env.get_template("vps-template.xml")
    vps_dir = f"{VPS_BASE_PATH}/{name}"
    memory = 512
    domain_xml = template.render(name=name,
                                 vps_dir=vps_dir,
                                 memory=memory)
    if DEBUG:
        print(f"TEMPLATE: {domain_xml}")
    conn = libvirt.open(LIBVIRT_SYSTEM)
    conn.defineXML(domain_xml)
    print("Creating VPS directory")
    copy_vps_dir(vps_dir)
    print("VPS directory created")
    ip_address = get_next_ip()
    conn_string = generate_nm_connection(ip_address)
    write_nm_connection(vps_dir, conn_string)
    update_vps_info(name, ip_address)


@click.command()
@click.argument('name')
def create(name):
    """
        Option to create a VPS libvirt domain
    """

    create_domain(name)


@click.command()
@click.argument('name')
def delete(name):
    """
        Option to delete VPS libvirt domain
    """
    click.echo(f"Deleting: {name}")
    with libvirt.open(LIBVIRT_SYSTEM) as conn:
        dom = conn.lookupByName(name)
        # TODO add checks
        try:
            print(f"Domain {name} not running stopping")
            dom.destroy()
        except Exception:
            print(f"Domain {name} is not running")
        print(f"Deleting VPS: {name}")
        dom.undefine()
        delete_vps_dir(name)


@click.command()
@click.argument('name')
def show(name):
    """
        Option to show VPS information
    """

    click.echo(f"Show: {name}")
    with libvirt.open(LIBVIRT_SYSTEM) as conn:
        dom = conn.lookupByName(name)
        show_domain(dom)


@click.command()
@click.argument('name')
def start(name):
    """
        Option to show VPS information
    """

    click.echo(f"Starting VPS LXC Container: {name}")
    with libvirt.open(LIBVIRT_SYSTEM) as conn:
        dom = conn.lookupByName(name)
        if not dom:
            print(f"VPS {name} does not exist")
            sys.exit(1)
        if dom.create() < 0:
            print(f"Could not start VPS {name}")
            sys.exit(1)


@click.command(name="list")
def list_domains():
    """
        List VPS domains
    """

    click.echo("VPS Containers")
    print("-"*40)
    with libvirt.open(LIBVIRT_SYSTEM) as conn:

        # List inactive domains
        domain_names = conn.listDefinedDomains()
        for n in domain_names:
            print(f"{n:20}| Inactive")

        if domain_names is None:
            print("No VPS domains defined")
            sys.exit()

        for domain_id in conn.listDomainsID():
            domain = conn.lookupByID(domain_id)
            show_domain(domain)


def show_domain(domain):
    """
        Show domain information
    """

    domain_states = [
        "Undefined",
        "Running",
        "Blocked on resource",
        "Paused",
        "Shutting down",
        "Off"
        "Crashed",
        "Suspended by guest power management"
    ]

    domain_info = domain.info()
    domain_state = domain_states[domain_info[0]]
    print(f"{domain.name():<20}| {domain_state}")


@click.group(name="vps", invoke_without_command=True)
@click.pass_context
@click.option('--version', '-v', is_flag=True,
              help='Show program version .')
def main(ctx: click.Context, version):
    """ Entry point """
    if version:
        print_version()
        sys.exit(0)
    if ctx.invoked_subcommand is None:
        click.echo("No VPS command specified.")


def print_version():
    """ Print program version """
    click.echo(f"Version: {VERSION}")


main.add_command(show)
main.add_command(list_domains)
main.add_command(create)
main.add_command(delete)
main.add_command(start)

if __name__ == "__main__":
    main()
